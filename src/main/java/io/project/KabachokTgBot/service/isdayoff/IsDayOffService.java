package io.project.KabachokTgBot.service.isdayoff;

import io.project.KabachokTgBot.logback.CacheDirProperty;
import io.project.KabachokTgBot.service.isdayoff.enums.DayType;
import io.project.KabachokTgBot.service.isdayoff.enums.DirectionType;
import io.project.KabachokTgBot.service.isdayoff.enums.LocalesType;
import io.project.KabachokTgBot.utils.TimeUtils;

import java.time.Instant;
import java.time.LocalDate;
import java.util.Date;


public class IsDayOffService {

    private final IsDayOff isDayOff;

    public IsDayOffService() {
        isDayOff = IsDayOff.Builder()
                .setLocale(LocalesType.RUSSIA)
                .setCacheDir(CacheDirProperty.CACHE_DIR)
                .setCacheStorageDays(7)
                .build();
    }

    public String getMessage() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(getStatsNearestWeekend());
        stringBuilder.append("\n");
        stringBuilder.append(getStatsNearNewYear());
        return stringBuilder.toString();
    }

    private long getFutureWeekendDay() {
        Date today = TimeUtils.todayDate();
        Date date = isDayOff.getFirstDayByType(today, DayType.NOT_WORKING_DAY, DirectionType.FUTURE);
        return TimeUtils.daysBetween(today, date);
    }

    private long getFutureWorkingDay() {
        Date today = TimeUtils.todayDate();
        Date date = isDayOff.getFirstDayByType(today, DayType.WORKING_DAY, DirectionType.FUTURE);
        return TimeUtils.daysBetween(today, date);
    }

    private String getStatsNearestWeekend() {
        long days = getFutureWeekendDay();
        StringBuilder result = new StringBuilder();
        result.append("üóø –í—ã—Ö–æ–¥–Ω–æ–π —Ç—ã –≥–¥–µ? üóø\n");
        if (days == 0) {
            result.append(getStatsNearestWorkingDay());
        } else if (days == 1) {
            result.append("–î–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ - –¥–µ–Ω—å, –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ —á—É—Ç—å —á—É—Ç—å!");
        } else {
            result.append("–î–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ - %d –¥–Ω—è(-–µ–π)! –°–æ–ª–Ω—Ü–µ –µ—â–µ –≤—ã—Å–æ–∫–æ!".formatted(days));
        }
        return result.append("\n").toString();
    }

    private String getStatsNearestWorkingDay() {
        StringBuilder result = new StringBuilder();
        long daysToWork = getFutureWorkingDay();
        if (daysToWork == 1) {
            result.append("–ü–µ–π –ø–∏–≤–∞, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! –ó–∞–≤—Ç—Ä–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É!");
        } else {
            result.append("–ü–µ–π –ø–∏–≤–∞, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! –ù–∞ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ %d –¥–Ω—è(-–µ–π)!".formatted(daysToWork));
        }
        return result.toString();
    }

    //christmas timer
    private String getStatsNearNewYear() {
        LocalDate today = TimeUtils.todayLocalDate();
        Instant newYearDate = LocalDate.of(today.getYear() + 1, 1, 1).atStartOfDay(TimeUtils.zoneId).toInstant();
        String date = TimeUtils.getFormattedDuration(TimeUtils.now(), newYearDate);
        return String.format("üéÑ –î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: üéÑ\n%s", date);
    }
}
